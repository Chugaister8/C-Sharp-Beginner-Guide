using System;

namespace DocumentationComments
{
    class Program
    {
        static void Main()
        {
            // Секція: Документаційні коментарі в C#
            // У C# документаційні коментарі — це спеціальні коментарі, позначені символами ///, які використовуються для створення документації до коду.
            // Вони дозволяють додавати структуровані описи до класів, методів, властивостей, параметрів тощо у форматі XML.
            // Коментарі ігноруються компілятором під час виконання, але можуть бути оброблені інструментами для генерації документації (наприклад, Sandcastle або DocFX).
            // Використовуються для документування API, пояснення призначення коду та забезпечення автоматичної генерації документації.
            // Розмір у пам’яті: документаційні коментарі не займають пам’ять у скомпільованій програмі, оскільки вони виключаються компілятором.

            /// <summary>
            /// Документаційний коментар: Починається з /// і містить XML-теги для опису коду.
            /// </summary>
            // Застосування: документування публічних API, методів, класів, параметрів для полегшення розуміння та генерації документації.
            // Перевага: підтримує структурований формат (XML), інтегрується з IDE (наприклад, IntelliSense) та інструментами документації.
            // Обмеження: не підходить для внутрішніх або коротких пояснень; для цього краще використовувати однорядкові (//) або багаторядкові коментарі (/* */).
            /// <summary>
            /// Ініціалізація змінної number зі значенням 42.
            /// </summary>
            /// <remarks>Ця змінна використовується для демонстрації.</remarks>
            int number = 42;
            /// <summary>
            /// Помилка: Неправильне використання тегів, наприклад, <param> без параметрів, може призвести до попереджень компілятора.
            /// </summary>

            // Приклади використання:
            /// <summary>
            /// Встановлення ціни товару в доларах.
            /// </summary>
            /// <value>Значення ціни у форматі double.</value>
            double price = 99.99;

            /// <summary>
            /// Позначення символу для подальшої обробки.
            /// </summary>
            char letter = 'A';

            // Помилки:
            /// <param name="x">Параметр x</param> // Помилка: <param> використовується без методу чи параметрів.
            /// <summary>Неправильний тег</summary2> // Помилка: неправильний XML-тег призведе до попередження компілятора.
        }

        /// <summary>
        /// Обчислює квадрат числа.
        /// </summary>
        /// <param name="value">Вхідне число для обчислення.</param>
        /// <returns>Квадрат вхідного числа.</returns>
        /// <exception cref="ArgumentException">Викидається, якщо значення від’ємне.</exception>
        static int Square(int value)
        {
            if (value < 0)
                throw new ArgumentException("Значення не може бути від’ємним.", nameof(value));
            return value * value;
        }
    }
}
// Додаткові зауваження:
// 1. Синтаксис: Документаційні коментарі починаються з /// і використовують XML-теги, такі як <summary>, <param>, <returns>, <remarks>.
//    Наприклад: /// <summary>Опис методу</summary> додає опис для IntelliSense.
// 2. Використання для документації: Документаційні коментарі ідеально підходять для створення документації API, яка може бути автоматично згенерована.
//    Наприклад: /// <param name="x">Опис параметра</param> документує параметри методу.
// 3. Читабельність: Використовуйте документаційні коментарі для публічних членів коду; для внутрішньої логіки краще застосовувати однорядкові (//) або багаторядкові коментарі (/* */).
//    Наприклад: // Внутрішній коментар для локальної логіки.
// 4. Практичне використання: Додавайте документаційні коментарі до методів, класів і властивостей для підтримки автодокументації та полегшення роботи інших розробників.
//    Наприклад: /// <returns>Повертає результат</returns> описує значення, що повертається методом.
// 5. Обмеження: Неправильне використання XML-тегів може призвести до попереджень компілятора; надмірне документування може ускладнити код.
//    Наприклад, уникайте документування очевидних речей, таких як /// <summary>Присвоює значення</summary> для простих операцій.

using System;
using System.Collections.Generic;

namespace Constants
{
    class Program
    {
        static void Main()
        {
            // Секція: Константи в C#
            // У C# константи — це іменовані ділянки пам’яті, які містять незмінні значення, визначені під час компіляції.
            // Константи оголошуються за допомогою ключового слова const і не можуть змінювати своє значення після ініціалізації.
            // Використовуються для зберігання фіксованих значень, таких як математичні константи, конфігураційні параметри або константи домену.
            // Константи є строго типізованими, і їх тип потрібно вказати явно (наприклад, const int, const double).
            // Константи ініціалізуються під час оголошення, і значення має бути обчислювальним під час компіляції.
            // Розмір у пам’яті: залежить від типу даних константи (наприклад, int — 4 байти, double — 8 байтів).
            // Область видимості: константи зазвичай оголошуються на рівні класу, але можуть бути локальними в методах.

            // Оголошення константи: Вказується ключове слово const, тип даних, ім’я константи та значення.
            // Застосування: використання для фіксованих значень, таких як PI, максимальна кількість спроб або конфігураційні параметри.
            // Перевага: забезпечують безпеку, запобігаючи зміні значень, і підвищують читабельність коду.
            // Обмеження: константи не можуть бути змінені після оголошення; значення має бути відоме під час компіляції.
            const int MaxAttempts = 3; // Приклад: оголошення константи MaxAttempts типу int зі значенням 3.
                                       // Ця константа визначає максимальну кількість спроб для операції.
                                       // Помилка: MaxAttempts = 5; — не компілюється, оскільки константу не можна змінювати.
            const double Pi = 3.14159; // Приклад: константа Pi типу double для математичних обчислень.

            // Приклади використання:
            const double TaxRate = 0.20;     // Константа TaxRate для зберігання ставки податку (20%).
            const string AppName = "MyApp";  // Константа AppName для зберігання назви програми.
            const bool IsDebugMode = false;  // Константа IsDebugMode для вказівки режиму налагодження.
            const int DaysInWeek = 7;        // Константа DaysInWeek для кількості днів у тижні.

            // Використання констант у коді:
            int attempts = 0; // Змінна для відстеження спроб.
            if (attempts < MaxAttempts) // Використання константи MaxAttempts в умові.
            {
                // Console.WriteLine("Спроба дозволена"); // Код активний, якщо attempts менше MaxAttempts.
            }
            double circleArea = Pi * 5 * 5; // Використання константи Pi для обчислення площі кола.

            // Помилки:
            // const int UninitializedConst; // Помилка: константа потребує ініціалізації під час оголошення.
            // MaxAttempts = 10; // Помилка: спроба змінити значення константи після ініціалізації.
            // const double DynamicValue = DateTime.Now.Second; // Помилка: значення константи має бути обчислювальним під час компіляції.
        }
    }
}
// Додаткові зауваження:
// 1. Синтаксис: Константа оголошується як const <тип> <ім’я> = <значення>.
//    Наприклад: const int MaxValue = 100;. Значення константи фіксується під час компіляції.
// 2. Використання: Константи застосовуються для фіксованих значень, які не змінюються під час виконання програми,
//    наприклад, математичних констант (Pi), конфігураційних параметрів або лімітів.
// 3. Читабельність: Використовуйте зрозумілі імена констант у форматі PascalCase, наприклад, MaxAttempts замість max.
//    Це відповідає конвенціям іменування в C# для констант.
// 4. Практичне використання: Константи використовуються в умовах, обчисленнях, конфігураціях,
//    щоб уникнути магічних чисел (наприклад, 3.14159) і зробити код зрозумілішим.
//    Наприклад: замість if (value > 3) краще використати if (value > MaxAttempts).
// 5. Обмеження: Константи не можуть бути змінені після оголошення, а їх значення має бути відоме під час компіляції.
//    Для значень, що визначаються під час виконання, використовуйте readonly або звичайні змінні.
//    Наприклад: readonly int runtimeValue = DateTime.Now.Second; — це можливо, але не для const.
// 6. Типи даних: Константи підтримують лише примітивні типи (int, double, float, string, bool тощо).
//    Складні типи (наприклад, List<int>) не можуть бути константами.
// 7. Відмінність від readonly: Константи (const) фіксуються під час компіляції, тоді як readonly змінні
//    можна ініціалізувати під час виконання (наприклад, у конструкторі) і змінювати лише там.
//    Наприклад: readonly int value = 10; можна встановити в конструкторі, але не const.
